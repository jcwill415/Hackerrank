# #30DaysofCode Log - Hackerrank - Round 1 - Jenna C. Williams

##R1D0
### 7/20/19
- ## Python3
  Starting 30 day coding challenge with Hackerrank
  (https://www.hackerrank.com/domains/tutorials/30-days-of-code)
  
  ## Day 0: Hello, World.

# Read a full line of input from stdin and save it to our dynamically typed variable, input_string.
input_string = input()

# Print a string literal saying "Hello, World." to stdout.
print('Hello, World.')

# TODO: Write a line of code here that prints the contents of input_string to stdout.
## Run Code 1:
input = "Welcome to 30 Days of Code!"
print(input)

# Output(stdout)
Hello, World.
Welcome to 30 Days of Code!

> failed hidden test case

>Solved
## Run Code 2:
print(input_string)

  ## AVeryBigSum

#!/bin/python3

import math
import os
import random
import re
import sys

# Complete the aVeryBigSum function below.
def aVeryBigSum(ar):
    sum = 0
    for element in ar:
        sum += element
    return sum

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    ar_count = int(input())

    ar = list(map(int, input().rstrip().split()))

    result = aVeryBigSum(ar)

    fptr.write(str(result) + '\n')

    fptr.close()

- ## Input (stdin):
5
1000000001 1000000002 1000000003 1000000004 1000000005

- ## Output (stdout):
5000000015

- ## Expected Output:
5000000015

  >Solved.

##R1D1
### 7/20/19 (8 days behind, catching up today 7/28/19!)
  ## Day 1: Data Types  
- ## INSTRUCTIONS:
Objective 
Today, we're discussing data types. Check out the Tutorial tab for learning materials and an instructional video!

Task 
Complete the code in the editor below. The variables , , and  are already declared and initialized for you. You must:

Declare  variables: one of type int, one of type double, and one of type String.
Read  lines of input from stdin (according to the sequence given in the Input Format section below) and initialize your  variables.
Use the  operator to perform the following operations: 
Print the sum of  plus your int variable on a new line.
Print the sum of  plus your double variable to a scale of one decimal place on a new line.
Concatenate  with the string you read as input and print the result on a new line.
Note: If you are using a language that doesn't support using  for string concatenation (e.g.: C), you can just print one variable immediately following the other on the same line. The string provided in your editor must be printed first, immediately followed by the string you read as input.

>Input Format
The first line contains an integer that you must sum with . 
The second line contains a double that you must sum with . 
The third line contains a string that you must concatenate with .

>Output Format
Print the sum of both integers on the first line, the sum of both doubles (scaled to  decimal place) on the second line, and then the two concatenated strings on the third line.

>Sample Input:
12
4.0
is the best place to learn and practice coding!

>Sample Output
16
8.0
HackerRank is the best place to learn and practice coding!

>Explanation:
When we sum the integers  and , we get the integer . 
When we sum the floating-point numbers  and , we get . 
When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!.

You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above and reading input from stdin.
# Declare second integer, double, and String variables.
i = 4
d = 4.0
s = 'HackerRank '

- ## SOLUTION: 
# Read and save an integer, double, and String to your variables.
ii = int(input())
dd = float(input())
ss = input()

# Print the sum of both integer variables on a new line.
print(i + ii) 

# Print the sum of the double variables on a new line.
print(d + dd)

# Concatenate and print the String variables on a new line
print(s + ss)

# The 's' variable above should be printed first.

>SOLVED.

##R1D2
### 7/21/19
  ## Day 2: Operators

##R1D3
### 7/22/19
  ## Day 3: Intro to Conditional Statements

##R1D4
### 7/23/19
  ## Day 4: Class vs. Instance

##R1D5
### 7/24/19
  ## Day 5: Loops

##R1D6
### 7/25/19
  ## Day 6: Let's Review

##R1D7
### 7/26/19
  ## Day 7: Arrays

##R1D8
### 7/27/19
  ## Day 8: Dictionaries and Maps

##R1D9
### 7/28/19
  ## Day 9: Reucrsion 3

##R1D10
### 7/29/19
  ## Day 10: Binary Numbers
  
##R1D11
### 7/30/19
  ## Day 11: 2D Arrays

##R1D12
### 7/31/19
  ## Day 12: Inheritance

##R1D13
### 8/1/19
  ## Day 13: Abstract Classes

##R1D14
### 8/2/19
  ## Day 14: Scope

##R1D15
### 8/3/19
  ## Day 15: Linked List

##R1D16
### 8/4/19
  ## Day 16: Exceptions - String to Integer

##R1D17
### 8/5/19
  ## Day 17: More Exceptions

##R1D18
### 8/6/19
  ## Day 18: Queues and Stacks

##R1D19
### 8/7/19
  ## Day 19: Interfaces

##R1D20
### 8/8/19
  ## Day 20: Sorting

##R1D21
### 8/9/19
  ## Day 21: Generics

##R1D22
### 8/10/19
  ## Day22: Binary Search Trees

##R1D23
### 8/11/19
  ## Day 23: BST Level-Order Traversal

##R1D24
### 8/12/19
  ## Day 24: More Linked Lists

##R1D25
### 8/13/19
  ## Day 25: Running Time and Complexity

##R1D26
### 8/14/19
  ## Day 26: Nested Logic

##R1D27
### 8/15/19
  ## Day 27: Testing

##R1D28
### 8/16/19
  ## Day 28: RegEx Patterns, and Intro to Databases

##R1D29
### 8/17/19
  ## Day 29: Bitwise AND
